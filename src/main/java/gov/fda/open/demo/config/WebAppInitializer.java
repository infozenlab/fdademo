/** * ********************************************************************* * Copyright (c) 2015 InfoZen, Inc. All rights reserved. InfoZen * PROPRIETARY/CONFIDENTIAL. Usage is subject to license terms. * ********************************************************************* */package gov.fda.open.demo.config;import org.springframework.core.Ordered;import org.springframework.core.annotation.Order;import org.springframework.web.filter.CharacterEncodingFilter;import org.springframework.web.filter.DelegatingFilterProxy;import org.springframework.web.servlet.support.AbstractAnnotationConfigDispatcherServletInitializer;import javax.servlet.*;import javax.servlet.http.HttpServlet;/** * The Class WebAppInitializer to register <b>Spring</b> application configuration * {@link ServiceConfig}, {@link SecurityConfig} and {@link WebMvcConfig}, *   * {@link HttpServlet} and {@link Filter} *  */@Order(Ordered.HIGHEST_PRECEDENCE)public class WebAppInitializer extends AbstractAnnotationConfigDispatcherServletInitializer {    /* (non-Javadoc)     * @see org.springframework.web.servlet.support.AbstractDispatcherServletInitializer#getServletMappings()     */    @Override    protected String[] getServletMappings() {        return new String[]{"/"};    }    /* (non-Javadoc)     * @see org.springframework.web.servlet.support.AbstractAnnotationConfigDispatcherServletInitializer#getRootConfigClasses()     */    @Override    protected Class<?>[] getRootConfigClasses() {        return new Class<?>[] {ServiceConfig.class, SecurityConfig.class};    }    /* (non-Javadoc)     * @see org.springframework.web.servlet.support.AbstractAnnotationConfigDispatcherServletInitializer#getServletConfigClasses()     */    @Override    protected Class<?>[] getServletConfigClasses() {        return new Class<?>[] {WebMvcConfig.class};    }    /* (non-Javadoc)     * @see org.springframework.web.servlet.support.AbstractDispatcherServletInitializer#getServletFilters()     */    @Override    protected Filter[] getServletFilters() {        CharacterEncodingFilter characterEncodingFilter = new CharacterEncodingFilter();        characterEncodingFilter.setEncoding("UTF-8");        characterEncodingFilter.setForceEncoding(true);        DelegatingFilterProxy securityFilterChain = new DelegatingFilterProxy("springSecurityFilterChain");        return new Filter[] {characterEncodingFilter, securityFilterChain};    }    /* (non-Javadoc)     * @see org.springframework.web.servlet.support.AbstractDispatcherServletInitializer#customizeRegistration(javax.servlet.ServletRegistration.Dynamic)     */    @Override    protected void customizeRegistration(ServletRegistration.Dynamic registration) {        registration.setInitParameter("defaultHtmlEscape", "true");        registration.setInitParameter("spring.profiles.active", "default");    }}